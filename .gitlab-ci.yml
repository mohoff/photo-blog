stages:
- setup
- build
- dockerize
- test
- deploy

# global variable definition
variables:
  # https://docs.gitlab.com/ee/ci/yaml/README.html#git-strategy
  # Default: use project settings, Choices: pull (slow), fetch (fast), none
  GIT_STRATEGY: fetch

setup_and_install:
  stage: setup
  image: node:10
  except:
    refs:
      - tags
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[ci-release\]/
  # overwrite global cache defintion once with push policy
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - node_modules/
      - data/
      - Dockerfile
    policy: push # push to cache without pulling first --> initializes cache
  script: yarn install # --frozen-lockfile

build:
  stage: build
  image: node:10
  except: 
    refs:
      - tags
    variables:
      - $CI_COMMIT_MESSAGE =~ /^chore\(release\)/
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - node_modules/
      - data/
    policy: pull
  variables:
    ARTIFACT_NAME: artifact_$CI_COMMIT_REF_SLUG
  artifacts:
    name: $ARTIFACT_NAME
    expire_in: 30 days
    when: on_success # Upload artifacts only when job succeeds (default). Alternatives: on_failure, always
    paths:
      - public/
  script: yarn build


dockerize:
  stage: dockerize
  image: docker:stable
  variables:
    # Details under https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker-executor
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG # $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    IMAGE_TAG_LATEST: $CI_REGISTRY_IMAGE:latest
  services:
    - docker:dind
  tags:
    - docker
  # Disable artifact passing (all artifacts from all previous stages are passed by default). Says this job doesn't depend on previous artifacts
  # However, we still pull from the cache with the global cache job
  dependencies:
    - build
  cache:
    key: $CI_COMMIT_REF_SLUG
    paths:
      - node_modules/
      - Dockerfile
    policy: pull # only pull cache, do not push
    #untracked: true # true: send all Git untracked files and files under `paths`
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $IMAGE_TAG_LATEST || true
    - docker build --cache-from $IMAGE_TAG_LATEST --tag $IMAGE_TAG --tag $IMAGE_TAG_LATEST .
    - docker push $IMAGE_TAG
    - docker push $IMAGE_TAG_LATEST

test:js:
  except: 
    refs:
      - schedules
      - tags
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[ci-release\]/
  script: yarn test
  coverage: /All files[^|]*\|[^|]*\s+([\d\.]+)/ # Extract jest code coverage from the job output (https://gitlab.com/gitlab-org/gitlab-ce/issues/29642#note_31177426)

deploy:
  stage: deploy
  variables:
    # Re-uses the project workspace, but skips all Git operations. It is mostly useful for jobs that operate exclusively on artifacts or caches.
    GIT_STRATEGY: none 
  script: echo "...reached deploy"
  environment:
    name: staging
    url: https://staging.blog.mohoff.de # Exposes a button that when clicked take you to the defined URL

show_env_vars:
  stage: setup
  variables:
    JOB_VARIABLE: 'this is an env var defined for this job'
    MY_VARIABLE: 'test overwrite environment variable' # does NOT overwrite
  script:
    # Custom environment variables defined in Gitlab CI Settings (must be unmasked in UI if these should be logged)
    - echo $MY_VARIABLE
    - echo $K8S_SECRET_MY_APP_VARIABLE
    # Environment variables defined in this job under `variables`
    - echo $JOB_VARIABLE
    # Predefined environment variables: https://gitlab.com/help/ci/variables/predefined_variables.md
    - echo $ARTIFACT_DOWNLOAD_ATTEMPTS
    - echo $CHAT_INPUT
    - echo $CHAT_CHANNEL
    - echo $CI
    - echo $CI_BUILDS_DIR
    - echo $CI_CONCURRENT_ID
    - echo $CI_CONCURRENT_PROJECT_ID
    - echo $CI_COMMIT_BEFORE_SHA
    - echo $CI_COMMIT_DESCRIPTION
    - echo $CI_COMMIT_MESSAGE
    - echo $CI_COMMIT_REF_NAME
    - echo $CI_COMMIT_REF_SLUG
    - echo $CI_COMMIT_SHA
    - echo $CI_COMMIT_SHORT_SHA
    - echo $CI_COMMIT_TAG
    - echo $CI_COMMIT_TITLE
    - echo $CI_CONFIG_PATH
    - echo $CI_DEBUG_TRACE
    - echo $CI_DEPLOY_PASSWORD
    - echo $CI_DEPLOY_USER
    - echo $CI_DISPOSABLE_ENVIRONMENT
    - echo $CI_ENVIRONMENT_NAME
    - echo $CI_ENVIRONMENT_SLUG
    - echo $CI_ENVIRONMENT_URL
    - echo $CI_JOB_ID
    - echo $CI_JOB_MANUAL
    - echo $CI_JOB_NAME
    - echo $CI_JOB_STAGE
    - echo $CI_JOB_TOKEN
    - echo $CI_JOB_URL
    - echo $CI_MERGE_REQUEST_ID
    - echo $CI_MERGE_REQUEST_IID
    - echo $CI_MERGE_REQUEST_PROJECT_ID
    - echo $CI_MERGE_REQUEST_PROJECT_PATH
    - echo $CI_MERGE_REQUEST_PROJECT_URL
    - echo $CI_MERGE_REQUEST_REF_PATH
    - echo $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - echo $CI_MERGE_REQUEST_SOURCE_BRANCH_SHA
    - echo $CI_MERGE_REQUEST_SOURCE_PROJECT_ID
    - echo $CI_MERGE_REQUEST_SOURCE_PROJECT_PATH
    - echo $CI_MERGE_REQUEST_SOURCE_PROJECT_URL
    - echo $CI_MERGE_REQUEST_TARGET_BRANCH_NAME
    - echo $CI_MERGE_REQUEST_TARGET_BRANCH_SHA
    - echo $CI_MERGE_REQUEST_TITLE
    - echo $CI_MERGE_REQUEST_ASSIGNEES
    - echo $CI_MERGE_REQUEST_MILESTONE
    - echo $CI_MERGE_REQUEST_LABELS
    - echo $CI_NODE_INDEX
    - echo $CI_NODE_TOTAL
    - echo $CI_API_V4_URL
    - echo $CI_PAGES_DOMAIN
    - echo $CI_PAGES_URL
    - echo $CI_PIPELINE_ID
    - echo $CI_PIPELINE_IID
    - echo $CI_PIPELINE_SOURCE
    - echo $CI_PIPELINE_TRIGGERED
    - echo $CI_PIPELINE_URL
    - echo $CI_PROJECT_DIR
    - echo $CI_PROJECT_ID
    - echo $CI_PROJECT_NAME
    - echo $CI_PROJECT_NAMESPACE
    - echo $CI_PROJECT_PATH
    - echo $CI_PROJECT_PATH_SLUG
    - echo $CI_PROJECT_URL
    - echo $CI_PROJECT_VISIBILITY
    - echo $CI_COMMIT_REF_PROTECTED
    - echo $CI_REGISTRY
    - echo $CI_REGISTRY_IMAGE
    - echo $CI_REGISTRY_PASSWORD
    - echo $CI_REGISTRY_USER
    - echo $CI_REPOSITORY_URL
    - echo $CI_RUNNER_DESCRIPTION
    - echo $CI_RUNNER_EXECUTABLE_ARCH
    - echo $CI_RUNNER_ID
    - echo $CI_RUNNER_REVISION
    - echo $CI_RUNNER_TAGS
    - echo $CI_RUNNER_VERSION
    - echo $CI_SERVER
    - echo $CI_SERVER_NAME
    - echo $CI_SERVER_REVISION
    - echo $CI_SERVER_VERSION
    - echo $CI_SERVER_VERSION_MAJOR
    - echo $CI_SERVER_VERSION_MINOR
    - echo $CI_SERVER_VERSION_PATCH
    - echo $CI_SHARED_ENVIRONMENT
    - echo $GET_SOURCES_ATTEMPTS
    - echo $GITLAB_CI
    - echo $GITLAB_USER_EMAIL
    - echo $GITLAB_USER_ID
    - echo $GITLAB_USER_LOGIN
    - echo $GITLAB_USER_NAME
    - echo $RESTORE_CACHE_ATTEMPTS
    - echo $GITLAB_FEATURES
    # Show all environment variables
    - export